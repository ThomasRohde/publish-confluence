<p>The <code>publish-confluence</code> tool provides a command-line interface (CLI) for publishing applications, managing projects, and interacting with Confluence pages.</p>

<h2>General Usage and Options</h2>

<p>The basic structure of a command is:</p>
{{#confluence-code language="bash" title="Basic Usage"}}
publish-confluence [options] [command]
{{/confluence-code}}

<p>If no command is specified, the default <code>publish</code> command is executed.</p>

<h3>Global Options</h3>
<p>These options can be used with any command:</p>
<table class="aui">
  <thead>
    <tr>
      <th>Option</th>
      <th>Alias</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--quiet</code></td>
      <td><code>-q</code></td>
      <td>Suppress all output except errors. Useful for CI/CD environments.</td>
    </tr>
    <tr>
      <td><code>--verbose</code></td>
      <td><code>-v</code></td>
      <td>Enable verbose output, showing more details about the process.</td>
    </tr>    <tr>
      <td><code>--debug</code></td>
      <td><code>-d</code></td>
      <td>Enable debug output, providing extensive details for troubleshooting.</td>
    </tr>
    <tr>
      <td><code>--dry-run</code> [dir]</td>
      <td></td>
      <td>Generate storage files locally instead of publishing to Confluence. Optionally specify a custom output directory (defaults to <code>dry/</code>).</td>
    </tr>    <tr>
      <td><code>--no-preview</code></td>
      <td></td>
      <td>Disable HTML preview generation in dry-run mode. Use this if you only need the storage format files and not the browsable preview.</td>
    </tr>
    <tr>
      <td><code>--markdown</code></td>
      <td></td>
      <td>When used with <code>--dry-run</code>, saves the processed Markdown templates as <code>.hbs</code> files for review. This allows you to see how your Markdown will be converted to Confluence storage format.</td>
    </tr>
    <tr>
      <td><code>--comment</code></td>
      <td><code>-c</code></td>
      <td>Display content marked with <code>comment=true</code> in admonition macros (info, note, warning, tip). Useful for showing developer-only documentation.</td>
    </tr><tr>
      <td><code>--log-file</code> [path]</td>
      <td></td>
      <td>Enable logging to a file for persistent error tracking and debugging. If a path is provided, logs will be written to that file; otherwise, logs will be written to <code>publish-confluence.log</code> in the current directory.</td>
    </tr>
    <tr>
      <td><code>--markdown</code></td>
      <td></td>
      <td>When used with <code>--dry-run</code>, saves the processed Markdown templates as <code>.hbs</code> files for review. This allows you to see how your Markdown will be converted to Confluence storage format.</td>
    </tr>
    <tr>
      <td><code>--help</code></td>
      <td><code>-h</code></td>
      <td>Display help information for the tool or a specific command.</td>
    </tr>
  </tbody>
</table>

<h2>Commands</h2>

<h3><code>publish</code> (Default Command)</h3>
<p>This is the primary command used to build (if necessary, depending on your workflow) and publish your application to Confluence. It reads your <code>publish-confluence.json</code> configuration, finds your build assets, uploads them, renders the templates, and creates or updates the specified Confluence page.</p>
{{#confluence-code language="bash" title="Publish Usage"}}
# Runs the default publish process
publish-confluence

# Explicitly calling the publish command (equivalent to the above)
publish-confluence publish

# Publishing with debug output
publish-confluence --debug
{{/confluence-code}}
<p>This command does not have specific options beyond the global ones; its behavior is controlled by the <code>publish-confluence.json</code> file and environment variables.</p>

<h4>Dry-Run Mode</h4>
{{#confluence-panel title="Dry-Run Feature" borderStyle="solid" borderColor="#DDDDDD" borderWidth="1" bgColor="#F4F5F7" titleBGColor="#DFE1E6" titleColor="#42526E"}}
  <p>The dry-run mode allows you to generate and preview Confluence page content locally without actually publishing to Confluence. This is useful for testing, validating, and reviewing pages before publishing them to a live Confluence instance.</p>
  
  <p>When you run the tool with the <code>--dry-run</code> option, it will:</p>
  <ol>
    <li>Create a local directory structure mirroring your Confluence space hierarchy</li>
    <li>Generate HTML files with properly formatted Confluence storage content</li>
    <li>Copy all required attachments to the appropriate directories</li>
    <li>Generate an HTML preview with Confluence-like styling (unless <code>--no-preview</code> is specified)</li>
  </ol>
  
  <h5>Output Directory Structure</h5>
  <p>The dry-run output is organized as follows:</p>
  {{#confluence-code language="text" title="Dry-Run Directory Structure"}}
dry/                            # Default directory (or custom directory you specify)
├── spaces/                     # Contains all space content
│   └── YOUR-SPACE-KEY/         # Your space content organized by space key
│       ├── attachments/        # All attachments for the space
│       ├── pages/              # Storage format files for all pages
│       │   ├── Page-Title.html # Main page content in Confluence storage format
│       │   └── Child-Page.html # Child page content in Confluence storage format
│       └── page-list.json      # JSON file listing all pages and their relationships
└── preview/                    # HTML preview files (only if preview is enabled)
    ├── index.html              # Entry point for the preview
    ├── css/                    # Styles for the preview
    ├── js/                     # JavaScript for the preview
    └── preview-content/        # Content for the preview
        └── YOUR-SPACE-KEY/     # Preview content for your space
  {{/confluence-code}}
  
  <h5>Usage Examples</h5>
  {{#confluence-code language="bash" title="Dry-Run Examples"}}
# Generate files in the default 'dry' directory with HTML preview
publish-confluence --dry-run

# Specify a custom output directory
publish-confluence --dry-run ./my-preview-folder

# Generate only storage files without the HTML preview
publish-confluence --dry-run --no-preview

# Combine with other options
publish-confluence --dry-run --verbose
  {{/confluence-code}}
  
  <p>The HTML preview provides a browsable interface that looks similar to Confluence, making it easy to verify how your pages will appear once published. To view the preview, open the <code>index.html</code> file in the preview directory with any web browser.</p>
{{/confluence-panel}}

<h3><code>create</code> Command</h3>
<p>The <code>create</code> command helps you initialize a new project structure suitable for use with <code>publish-confluence</code>. It interactively guides you through setting up:</p>
<ul>
    <li>A basic project directory (if needed).</li>
    <li>Default template files (<code>confluence-template.html</code> and <code>macro-template.html</code>).</li>
    <li>A <code>publish-confluence.json</code> configuration file with initial values.</li>
    <li>A <code>.env</code> file for your Confluence credentials.</li>
</ul>
{{#confluence-code language="bash" title="Create Usage"}}
# Start the interactive project setup wizard
publish-confluence create

# Run in quiet mode (may skip prompts if defaults are sufficient, or fail)
publish-confluence create -q
{{/confluence-code}}
<p>This command is useful for quickly scaffolding a new project that you intend to publish to Confluence.</p>

<h3><code>fetch</code> Command</h3>
<p>The <code>fetch</code> command allows you to retrieve the content of Confluence pages, save them to your local filesystem, and generate a configuration file for easy roundtripping. This is useful for downloading pages for local editing or creating templates based on existing pages.</p>
{{#confluence-code language="bash" title="Fetch Usage"}}
publish-confluence fetch [options]
{{/confluence-code}}

<h4>Fetch Options</h4>
<table class="aui">
  <thead>
    <tr>
      <th>Option</th>
      <th>Alias</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--space-key</code> &lt;key&gt;</td>
      <td><code>-s</code> &lt;key&gt;</td>
      <td>The key of the Confluence space containing the page. Use <code>~username</code> for personal spaces.</td>
      <td>No*</td>
    </tr>
    <tr>
      <td><code>--page-title</code> &lt;title&gt;</td>
      <td><code>-p</code> &lt;title&gt;</td>
      <td>The exact title of the Confluence page to fetch.</td>
      <td>No*</td>
    </tr>
    <tr>
      <td><code>--children</code></td>
      <td><code>-c</code></td>
      <td>Recursively fetch all child pages under the specified page.</td>
      <td>No</td>
    </tr>
    <tr>
      <td><code>--format</code> &lt;format&gt;</td>
      <td><code>-f</code> &lt;format&gt;</td>
      <td>The output format. Options are <code>storage</code> (default, returns XHTML body) or <code>json</code> (returns the full page JSON object).</td>
      <td>No</td>
    </tr>
    <tr>
      <td><code>--output</code> &lt;file&gt;</td>
      <td><code>-o</code> &lt;file&gt;</td>
      <td>Save the output to a specific file instead of using the page directory structure.</td>
      <td>No</td>
    </tr>
    <tr>
      <td><code>--output-dir</code> &lt;dir&gt;</td>
      <td></td>
      <td>Directory to save fetched pages (default: <code>./content</code>)</td>
      <td>No</td>
    </tr>
    <tr>
      <td><code>--config</code> &lt;file&gt;</td>
      <td></td>
      <td>Path to config file (default: <code>./publish-confluence.json</code>)</td>
      <td>No</td>
    </tr>
  </tbody>
</table>
<p>* Either provide both <code>--space-key</code> and <code>--page-title</code>, or have a valid <code>publish-confluence.json</code> file in your workspace.</p>

<h4>Fetch Examples</h4>
{{#confluence-code language="bash" title="Fetch Examples"}}
# Fetch the storage format (XHTML) of a page in space "MYSPACE"
publish-confluence fetch -s MYSPACE -p "My Important Page"

# Fetch a page and all its children recursively
publish-confluence fetch -s MYSPACE -p "My Important Page" -c

# Fetch the storage format from a personal space
publish-confluence fetch -s ~jsmith -p "My Personal Notes"

# Fetch the full page data as JSON
publish-confluence fetch -s DOCS -p "API Reference" -f json

# Save the page content to a file
publish-confluence fetch -s TEAMSPACE -p "Project Dashboard" -o ./output/dashboard.html

# Save to a custom output directory
publish-confluence fetch -s TEAMSPACE -p "Project Dashboard" --output-dir ./my-pages

# Fetch using an existing config file (no space/page arguments needed)
publish-confluence fetch

# Fetch with children using an existing config file
publish-confluence fetch -c

# Fetch using verbose logging
publish-confluence fetch -s TEAMSPACE -p "Project Dashboard" -v
{{/confluence-code}}

<h4>Fetch Workflow and Roundtripping</h4>
<p>The fetch command creates or updates a <code>publish-confluence.json</code> file with information about the pages you've fetched, allowing for easy roundtripping:</p>

<ol>
  <li>First fetch: <code>publish-confluence fetch -s MYSPACE -p "Parent Page" -c</code></li>
  <li>Edit the downloaded content files locally</li>
  <li>Publish back: <code>publish-confluence</code> (using the generated config file)</li>
  <li>Later updates: <code>publish-confluence fetch -c</code> (will use the config file)</li>
</ol>

<p>The command creates a directory structure that preserves the parent-child relationship of pages:</p>
{{#confluence-code language="text" title="Fetch Directory Structure"}}
content/
└── MYSPACE/
    ├── Parent_Page/
    │   ├── Parent_Page.html
    │   └── Child_Page/
    │       └── Child_Page.html
    └── publish-confluence.json
{{/confluence-code}}

<h3><code>generate-prompt</code> Command</h3>
<p>The <code>generate-prompt</code> command creates a structured prompt suitable for use with Large Language Models (LLMs) like ChatGPT or Claude. This prompt helps the LLM understand your project context, including configuration, templates, and goals, enabling it to provide more relevant assistance.</p>
{{#confluence-code language="bash" title="Generate Prompt Usage"}}
publish-confluence generate-prompt [options]
{{/confluence-code}}

<h4>Generate Prompt Options</h4>
<table class="aui">
  <thead>
    <tr>
      <th>Option</th>
      <th>Alias</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--file</code> &lt;filepath&gt;</td>
      <td><code>-f</code> &lt;filepath&gt;</td>
      <td>Read the initial project idea or requirements from a specified text file instead of prompting interactively.</td>
      <td>No</td>
    </tr>
  </tbody>
</table>

<h4>Generate Prompt Output</h4>
<p>The command outputs a detailed Markdown prompt including:</p>
<ul>
    <li>Project description and requirements (gathered interactively or from file).</li>
    <li>Technical constraints (based on your environment).</li>
    <li>Contents of your <code>publish-confluence.json</code>.</li>
    <li>Contents of your template files (<code>confluence-template.html</code>, <code>macro-template.html</code>).</li>
    <li>Build configuration details (if detectable).</li>
</ul>

<h4>Generate Prompt Example</h4>
{{#confluence-code language="bash" title="Generate Prompt Example"}}
# Generate a prompt interactively
publish-confluence generate-prompt

# Generate a prompt using requirements from a file
publish-confluence generate-prompt -f ./project-requirements.txt
{{/confluence-code}}

<hr />
<p><em>Last updated: \{{currentDate}}</em></p>