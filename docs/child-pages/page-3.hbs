<p>The <code>publish-confluence</code> tool uses Handlebars templates to generate the final Confluence page content. There are two primary types of templates you can use to control the output:</p>
<ul>
    <li><strong>Page Template:</strong> Defines the overall structure and content of the Confluence page.</li>
    <li><strong>Macro Template:</strong> Defines the content specifically within the HTML macro that embeds your application.</li>
</ul>
<p>These templates use Handlebars syntax for variables and helpers. Page templates can be written in either HTML or Markdown format.</p>

{{#confluence-panel title="New Feature!" type="tip"}}
  <p><strong>Markdown Page Templates:</strong> You can now write page templates in Markdown format! Simply use the <code>.md</code> extension for your page template (<code>templatePath</code>), and it will be automatically converted to Confluence-compatible XHTML during publishing while preserving all Handlebars expressions. Note that macro templates (<code>macroTemplatePath</code>) must still be in HTML format.</p>
{{/confluence-panel}}

<hr />

<h2>3.1. Page Templates (<code>confluence-template.html</code> or <code>confluence-template.md</code>)</h2>
<p>This template controls the entire Confluence page layout. It typically includes standard XHTML elements or Markdown formatting, Confluence macro helpers, and placeholders for the page title and the main application macro.</p>

<h3>Purpose and Structure</h3>
<p>Use the page template to:</p>
<ul>
    <li>Set the main page heading (often using <code>\{{pageTitle}}</code>).</li>
    <li>Add introductory text, instructions, or surrounding content using standard XHTML tags</li>
    <li>Incorporate Confluence-specific features like Tables of Contents, Panels, or Layouts using the provided {{confluence-link  type="page" text="helper macros" pageTitle="4. Confluence helper macros"}}.</li>
    <li>Define where the main application macro (generated from the Macro Template) should be embedded using <code>\{{{macro}}}</code>.</li>
    <li>Add footers or metadata, like the last updated date using <code>\{{currentDate}}</code>.</li>
</ul>

<h3>Available Handlebars Variables</h3>
<ul>
    <li><code>\{{pageTitle}}</code>: The title of the Confluence page being created or updated.</li>
    <li><code>\{{{macro}}}</code>: Expands to the compiled HTML macro content generated from the <strong>Macro Template</strong>. Use triple braces <code>\{{{ }}}</code> to prevent HTML escaping. This is the most common way to include your application.</li>
    <li><code>\{{currentDate}}</code>: The current date when the tool is run, formatted as YYYY-MM-DD.</li>
</ul>

<h3>Default Page Template</h3>
<p>If you don't specify a <code>templatePath</code> in your configuration, the tool uses this default:</p>
{{#confluence-code language="html" title="Default confluence-template.html" linenumbers=true}}
<h1>\{{pageTitle}}</h1>

\{{{macro}}}

<hr/>
<p><em>Last updated: {{currentDate}}</em></p>
{{/confluence-code}}

<h3>Example Custom Page Template</h3>
<p>Here's an example combining standard XHTML, Confluence macros, and the application placeholder:</p>
{{#confluence-code language="html" title="Example custom confluence-template.html" linenumbers=true}}
<h1>\{{pageTitle}}</h1>

\{{confluence-toc maxLevel=2}}

<p>Welcome to the interactive application page. Below you will find the main application embedded within a layout.</p>

\{{#confluence-layout}}
  \{{#layout-section type="two_left_sidebar"}}
    \{{#layout-cell}}
      \{{#confluence-panel title="Instructions" type="info"}}
        <p>Use the controls within the application to filter and explore the data.</p>
        <ul>
          <li>Select a date range.</li>
          <li>Choose a category.</li>
          <li>Export results if needed.</li>
        </ul>
      \{{/confluence-panel}}
      \{{confluence-status type="green" text="Operational"}}
    \{{/layout-cell}}
    \{{#layout-cell}}
      <h2>Application View</h2>
      \{{{macro}}}
    \{{/layout-cell}}
  \{{/layout-section}}
\{{/confluence-layout}}

<hr />
<p><em>Page generated on: \{{currentDate}}</em></p>
{{/confluence-code}}

<hr />

<h2>3.2. Macro Templates (<code>macro-template.html</code>)</h2>
<p>This template defines the HTML content that goes <em>inside</em> the Confluence HTML macro. It's primarily used to set up the root element for your JavaScript application and include the necessary script and style tags.</p>

{{#confluence-warning title="Important Note on Attachments"}}
  <p>You <strong>must</strong> specify a valid path for <code>macroTemplatePath</code> in your <code>publish-confluence.json</code> configuration if you want the tool to upload your build assets (JS, CSS, images, etc.) as attachments and include them on the page. If <code>macroTemplatePath</code> is not set (or null), asset uploading and the inclusion of <code>\{{{scripts}}}</code> and <code>\{{{styles}}}</code> is skipped.</p>
{{/confluence-warning}}

<h3>Purpose and Structure</h3>
<p>Use the macro template to:</p>
<ul>
    <li>Define the root HTML element where your JavaScript application will mount (e.g., <code>&lt;div id="app"&gt;&lt;/div&gt;</code>).</li>
    <li>Include placeholders for the automatically generated script tags (<code>\{{{scripts}}}</code>) and stylesheet links (<code>\{{{styles}}}</code>) that point to the uploaded assets.</li>
    <li>Optionally add loading indicators or basic fallback content that shows before the JavaScript application loads.</li>
</ul>

<h3>Available Handlebars Variables</h3>
<ul>
    <li><code>\{{{scripts}}}</code>: Expands to one or more <code>&lt;script src="..."&gt;&lt;/script&gt;</code> tags linking to the JavaScript files found in your <code>distDir</code> (based on <code>includedFiles</code>/<code>excludedFiles</code>). Use triple braces <code>\{{{ }}}</code>.</li>
    <li><code>\{{{styles}}}</code>: Expands to one or more <code>&lt;link rel="stylesheet" href="..."&gt;</code> tags linking to the CSS files found in your <code>distDir</code>. Use triple braces <code>\{{{ }}}</code>.</li>
</ul>

<h3>Default Macro Template</h3>
<p>If you provide a <code>macroTemplatePath</code> but the file is simple, this is a good starting point:</p>
{{#confluence-code language="html" title="Default macro-template.html" linenumbers=true}}
<div>
  <div id="app">
    <!-- Your JS app mounts here -->
    <p>Loading application...</p>
  </div>
  \{{{styles}}}
  \{{{scripts}}}
</div>
{{/confluence-code}}

<h3>Example Custom Macro Template</h3>
<p>This example includes a more structured loading state:</p>
{{#confluence-code language="html" title="Example custom macro-template.html" linenumbers=true}}
<div class="app-container" style="min-height: 400px; position: relative;">
  <div id="app-loading-indicator" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center;">
     <p>Please wait while the application loads.</p>
     <!-- Add a spinner CSS class here if desired -->
     <div class="spinner"></div>
  </div>
  <div id="app" style="visibility: hidden;">
    <!-- App content will replace this -->
  </div>

  <!-- Inject styles and scripts -->
  \{{{styles}}}
  \{{{scripts}}}

  <!-- Optional: Small script to hide loader once main app script runs -->
  <script>
    // This assumes your main app script makes #app visible
    // Or you can have your app explicitly hide the loader
    document.addEventListener('DOMContentLoaded', function() {
      var appElement = document.getElementById('app');
      var loaderElement = document.getElementById('app-loading-indicator');
      
      // Basic check: If app has content or becomes visible, hide loader
      var observer = new MutationObserver(function(mutations) {
        if (appElement.style.visibility !== 'hidden' || appElement.innerHTML.trim() !== '') {
          if(loaderElement) loaderElement.style.display = 'none';
          appElement.style.visibility = 'visible'; // Ensure app is visible
          observer.disconnect(); // Stop observing once loaded
        }
      });
      
      observer.observe(appElement, { childList: true, attributes: true, subtree: true });

      // Fallback timeout
      setTimeout(function() {
         if(loaderElement) loaderElement.style.display = 'none';
         appElement.style.visibility = 'visible';
         observer.disconnect();
      }, 10000); // Hide loader after 10s regardless
    });
  </script>
</div>
{{/confluence-code}}

<hr />

<h2>3.3. Using Macro Helpers in Templates</h2>
<p>You have two main ways to incorporate Confluence macros (like panels, layouts, code blocks) into your published page:</p>

<h3>Approach 1: Using <code>\{{{macro}}}</code> in Page Template (Recommended)</h3>
<p>This is the simplest and most common approach, especially when your primary goal is to embed a single JavaScript application.</p>
<ol>
    <li>Create both a <code>confluence-template.html</code> (Page Template) and a <code>macro-template.html</code> (Macro Template).</li>
    <li>In your <code>confluence-template.html</code>, place the <code>\{{{macro}}}</code> variable where you want the application to appear. You can surround it with other content or Confluence macro helpers as needed.</li>
    <li>In your <code>macro-template.html</code>, define the structure for your app (e.g., <code>&lt;div id="app"&gt;</code>) and include <code>\{{{styles}}}</code> and <code>\{{{scripts}}}</code>.</li>
</ol>

<p><strong>Example (Page Template):</strong></p>
{{#confluence-code language="html" linenumbers="false"}}
<h1>\{{pageTitle}}</h1>
<p>Application details:</p>
\{{{macro}}} <!-- The entire app defined in macro-template.html goes here -->
<p>Last updated: \{{currentDate}}</p>
{{/confluence-code}}

<h3>Approach 2: Using Macro Helpers Directly in Page Template</h3>
<p>This approach gives you more control if you need to mix multiple Confluence macros directly or if you are *not* embedding a complex JavaScript application (i.e., not using a Macro Template).</p>
<ol>
    <li>Create only a <code>confluence-template.html</code> (Page Template).</li>
    <li>Do <strong>not</strong> set <code>macroTemplatePath</code> in your configuration (or set it to null). Asset attachment will be skipped.</li>
    <li>Use the Confluence macro helpers (like <code>\{{#confluence-panel}}</code>, <code>\{{#confluence-layout}}</code>, <code>\{{#confluence-code}}</code>, etc.) directly within your <code>confluence-template.html</code> to build the page structure.</li>
    <li>If you *do* need to embed a simple HTML/JS snippet, you can use the <code>\{{#confluence-html}}</code>...<code>\{{/confluence-html}}</code> helper directly in the page template. Remember you won't have the automatic <code>\{{{scripts}}}</code> and <code>\{{{styles}}}</code> variables in this case.</li>
</ol>
<p><strong>Example (Page Template using direct helpers):</strong></p>
{{#confluence-code language="html" linenumbers="false"}}
<h1>\{{pageTitle}}</h1>
\{{#confluence-info title="Project Status"}}
  <p>The project is currently \{{confluence-status type="yellow" text="In Progress"}}.</p>
\{{/confluence-info}}

\{{#confluence-code language="javascript" title="Sample Snippet"}}
function greet() {
  console.log("Hello from Confluence!");
}
\{{/confluence-code}}

<p>Last updated: \{{currentDate}}</p>
{{/confluence-code}}

<hr />

<h2>3.4. Using Markdown Page Templates</h2>
<p>The <code>publish-confluence</code> tool now supports creating page templates in Markdown format, which are automatically converted to Confluence-compatible XHTML during publishing.</p>

{{#confluence-warning title="Limitation"}}
<p>Markdown processing is only supported for page templates (specified with <code>templatePath</code>). Macro templates (specified with <code>macroTemplatePath</code>) must still be in HTML format.</p>
{{/confluence-warning}}

<h3>How It Works</h3>
<p>When a page template file has a <code>.md</code> extension, the tool will:</p>
<ol>
    <li>Load the Markdown content from the file</li>
    <li>Process it using a markdown processor that understands GitHub Flavored Markdown</li>
    <li>Convert the Markdown to Confluence-compatible XHTML</li>
    <li>Preserve all Handlebars expressions (like <code>\{{pageTitle}}</code> or <code>\{{{macro}}}</code>) during the conversion</li>
    <li>Use the resulting XHTML as the template content</li>
</ol>

<p>This allows you to write templates using the more familiar and readable Markdown syntax, while still getting all the benefits of Confluence's rich content features.</p>

<h3>Supported Markdown Features</h3>
<p>The Markdown processor supports:</p>
<ul>
    <li><strong>Basic formatting:</strong> Headings, bold, italic, lists, links, images, etc.</li>
    <li><strong>GitHub Flavored Markdown:</strong> Tables, fenced code blocks, task lists, strikethrough</li>
    <li><strong>Inline HTML:</strong> You can mix HTML with Markdown when needed</li>
    <li><strong>Code blocks:</strong> With syntax highlighting</li>
    <li><strong>Confluence macros:</strong> Handlebars helpers inside Markdown content</li>
</ul>

<h3>Example Markdown Page Template</h3>
{{#confluence-code language="markdown" title="Example confluence-template.md" linenumbers=true}}
# \{{pageTitle}}

> This is a blockquote that introduces the application.

## Application Features

* Feature one
* Feature two
* Feature three

## Interactive Application

Below you'll find the interactive application:

\{{{macro}}}

---

*Last updated: \{{currentDate}}*
{{/confluence-code}}

<h3>Best Practices for Markdown Page Templates</h3>
<ul>
    <li><strong>Use proper Markdown syntax</strong> for structure rather than HTML where possible</li>
    <li><strong>Remember that Handlebars expressions</strong> like <code>\{{pageTitle}}</code> still work inside Markdown</li>
    <li><strong>You can mix Confluence macro helpers</strong> with Markdown syntax</li>
    <li><strong>Triple-brace expressions</strong> like <code>\{{{macro}}}</code> are still needed to prevent HTML escaping</li>
    <li><strong>For complex layouts</strong>, you might still want to use HTML templates with Confluence macros</li>
    <li><strong>Test your templates</strong> in dry-run mode to ensure they convert correctly</li>
</ul>

{{#confluence-panel title="Template File Extensions" type="note"}}
<p>When configuring <code>publish-confluence.json</code>, make sure to specify the correct file extension for your page template:</p>
{{#confluence-code language="json" linenumbers=false}}
{
  "templatePath": "./confluence-template.md",
  "macroTemplatePath": "./macro-template.html"
}
{{/confluence-code}}
<p>Remember that only the page template supports markdown (.md) format. The macro template must be in HTML format.</p>
{{/confluence-panel}}

<hr />