<!DOCTYPE html>
<html lang="en">
<head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>{{title}} - Confluence Preview</title>
  <link rel="stylesheet" href="../confluence-styles.css">
  <link rel="stylesheet" href="../style-overrides.css">
  <style>
    :root {
      --primary-color: #0052CC;
      --primary-light: #4C9AFF;
      --primary-dark: #0747A6;
      --secondary-color: #6554C0;
      --background-color: #F4F5F7;
      --text-color: #172B4D;
      --light-text: #6B778C;
      --border-color: #DFE1E6;
      --success-color: #36B37E;
      --warning-color: #FFAB00;
      --error-color: #FF5630;
      --info-color: #00B8D9;
      --panel-background: #FFFFFF;
      --sidebar-width: 280px;
      --header-height: 60px;
      --spacing-xs: 4px;
      --spacing-sm: 8px;
      --spacing-md: 16px;
      --spacing-lg: 24px;
      --spacing-xl: 32px;
      --border-radius: 3px;
      --font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: var(--font-family);
      background-color: var(--background-color);
      color: var(--text-color);
      line-height: 1.5;
      font-size: 14px;
      display: grid;
      grid-template-areas:
        "header header"
        "sidebar main"
        "footer footer";
      grid-template-columns: var(--sidebar-width) 1fr;
      grid-template-rows: var(--header-height) 1fr auto;
      min-height: 100vh;
    }

    /* Header styles */
    .header {
      grid-area: header;
      background-color: var(--primary-color);
      color: white;
      padding: 0 var(--spacing-lg);
      display: flex;
      align-items: center;
      justify-content: space-between;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .header h1 {
      font-size: 20px;
      font-weight: 500;
    }

    .header-info {
      display: flex;
      align-items: center;
      gap: var(--spacing-md);
    }

    .space-badge {
      background-color: var(--primary-dark);
      color: white;
      font-size: 12px;
      padding: var(--spacing-xs) var(--spacing-sm);
      border-radius: var(--border-radius);
      font-weight: 500;
      margin-left: var(--spacing-sm);
    }

    .dry-run-badge {
      background-color: #FF8B00;
      color: white;
      font-size: 12px;
      padding: var(--spacing-xs) var(--spacing-sm);
      border-radius: var(--border-radius);
      font-weight: 500;
    }

    /* Sidebar styles */
    .sidebar {
      grid-area: sidebar;
      background-color: var(--panel-background);
      border-right: 1px solid var(--border-color);
      padding: var(--spacing-md);
      overflow-y: auto;
    }

    .pages-nav {
      margin-bottom: var(--spacing-lg);
    }

    .pages-nav h2 {
      font-size: 16px;
      font-weight: 500;
      margin-bottom: var(--spacing-md);
      color: var(--primary-dark);
      border-bottom: 1px solid var(--border-color);
      padding-bottom: var(--spacing-sm);
    }

    .page-item {
      margin-bottom: var(--spacing-sm);
    }

    .page-link {
      display: block;
      padding: var(--spacing-xs) var(--spacing-sm);
      color: var(--text-color);
      text-decoration: none;
      border-radius: var(--border-radius);
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      position: relative;
    }

    .page-link.has-children {
      padding-left: var(--spacing-md);
    }
    
    .page-link:hover {
      background-color: var(--background-color);
    }

    .page-link.active {
      background-color: var(--primary-light);
      color: white;
    }
    
    /* Root page styling */
    .page-link-root {
      background-color: rgba(76, 154, 255, 0.1);
      border-left: 3px solid var(--primary-color);
      margin-bottom: var(--spacing-sm);
      font-weight: 500;
    }
    
    .root-page {
      margin-bottom: var(--spacing-md);
    }

    .page-children {
      margin-left: var(--spacing-lg);
      margin-top: var(--spacing-xs);
      border-left: 1px solid var(--border-color);
      padding-left: var(--spacing-sm);
      /* Always display all pages - no toggling */
      display: block !important; 
      /* Add a background color to make them more visible */
      background-color: rgba(76, 154, 255, 0.05);
    }

    /* Main content styles */
    .main-content {
      grid-area: main;
      background-color: var(--panel-background);
      padding: var(--spacing-xl);
      overflow-y: auto;
      margin: var(--spacing-md);
      border-radius: var(--border-radius);
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .page-header {
      margin-bottom: var(--spacing-xl);
      border-bottom: 1px solid var(--border-color);
      padding-bottom: var(--spacing-md);
    }

    .page-header h1 {
      font-size: 24px;
      font-weight: 500;
      margin-bottom: var(--spacing-sm);
    }

    .metadata {
      color: var(--light-text);
      font-size: 12px;
      display: flex;
      gap: var(--spacing-md);
    }

    .page-content {
      line-height: 1.6;
    }

    /* Page content styling */
    .page-content h1 {
      font-size: 24px;
      font-weight: 500;
      margin: var(--spacing-lg) 0 var(--spacing-md);
      padding-bottom: var(--spacing-sm);
      border-bottom: 1px solid var(--border-color);
    }

    .page-content h2 {
      font-size: 20px;
      font-weight: 500;
      margin: var(--spacing-lg) 0 var(--spacing-md);
    }

    .page-content h3 {
      font-size: 16px;
      font-weight: 500;
      margin: var(--spacing-md) 0;
    }

    .page-content h4, .page-content h5, .page-content h6 {
      font-size: 14px;
      font-weight: 500;
      margin: var(--spacing-md) 0;
    }

    .page-content p {
      margin-bottom: var(--spacing-md);
    }

    .page-content ul, .page-content ol {
      margin-bottom: var(--spacing-md);
      padding-left: var(--spacing-xl);
    }

    .page-content li {
      margin-bottom: var(--spacing-xs);
    }

    .page-content code {
      font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace;
      background-color: var(--background-color);
      padding: 0 var(--spacing-xs);
      border-radius: var(--border-radius);
    }

    .page-content pre {
      background-color: var(--background-color);
      padding: var(--spacing-md);
      border-radius: var(--border-radius);
      overflow-x: auto;
      margin-bottom: var(--spacing-md);
    }

    .page-content pre code {
      background-color: transparent;
      padding: 0;
    }

    .page-content blockquote {
      border-left: 4px solid var(--primary-light);
      padding-left: var(--spacing-md);
      margin-left: var(--spacing-md);
      margin-bottom: var(--spacing-md);
      color: var(--light-text);
    }

    .page-content table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: var(--spacing-md);
    }

    .page-content th, .page-content td {
      border: 1px solid var(--border-color);
      padding: var(--spacing-sm);
      text-align: left;
    }

    .page-content th {
      background-color: var(--background-color);
      font-weight: 500;
    }

    .page-content a {
      color: var(--primary-color);
      text-decoration: none;
    }

    .page-content a:hover {
      text-decoration: underline;
    }

    /* Attachments section */
    .attachments {
      margin-top: var(--spacing-xl);
      border-top: 1px solid var(--border-color);
      padding-top: var(--spacing-md);
    }

    .attachments h2 {
      font-size: 16px;
      font-weight: 500;
      margin-bottom: var(--spacing-md);
    }

    .attachment-item {
      display: flex;
      align-items: center;
      padding: var(--spacing-sm);
      border: 1px solid var(--border-color);
      border-radius: var(--border-radius);
      margin-bottom: var(--spacing-sm);
    }

    .attachment-icon {
      margin-right: var(--spacing-sm);
      color: var(--light-text);
    }

    .attachment-info {
      flex: 1;
    }

    .attachment-name {
      font-weight: 500;
    }

    .attachment-size {
      font-size: 12px;
      color: var(--light-text);
    }

    .attachment-action {
      margin-left: var(--spacing-sm);
    }

    .attachment-action a {
      color: var(--primary-color);
      text-decoration: none;
    }

    .back-link {
      display: inline-block;
      margin-top: var(--spacing-md);
      padding: var(--spacing-sm) var(--spacing-md);
      background-color: var(--background-color);
      color: var(--text-color);
      text-decoration: none;
      border-radius: var(--border-radius);
      font-weight: 500;
    }

    .back-link:hover {
      background-color: var(--border-color);
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      body {
        grid-template-areas:
          "header header"
          "main main"
          "footer footer";
        grid-template-columns: 1fr;
      }

      .sidebar {
        display: none;
        position: fixed;
        top: var(--header-height);
        left: 0;
        height: calc(100vh - var(--header-height));
        width: 100%;
        z-index: 10;
        box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
      }

      .sidebar.active {
        display: block;
      }

      .menu-toggle {
        display: block;
      }
    }

    /* For mobile sidebar toggle */
    .menu-toggle {
      display: none;
      background: transparent;
      border: none;
      color: white;
      font-size: 24px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <header class="header">
    <div class="header-info">
      <h1>Confluence Preview <span class="space-badge">{{spaceKey}}</span></h1>
      <span class="dry-run-badge">DRY RUN</span>
    </div>
    <button class="menu-toggle">☰ Menu</button>
  </header>

  <aside class="sidebar">
    <div class="pages-nav">
      <h2>Pages</h2>
      {{#with (lookup (find spaces (lookup this "spaceKey")) "pages") as |spacePages|}}
        {{> recursivePageTree pages=spacePages spaceKey=../spaceKey}}
      {{/with}}
    </div>
    <div>
      <a href="../index.html" class="back-link">← Back to Spaces</a>
    </div>
  </aside>
  
  <main class="main-content">
    <div class="page-header">
      <h1>{{title}}</h1>
      <div class="metadata">
        <div>Version: {{version}}</div>
      </div>
    </div>

    <div class="page-content confluence-content">
      {{{content}}}
    </div>
    
    {{#if attachments.length}}
      <div class="attachments">
        <h2>Attachments</h2>
        <ul>
          {{#each attachments}}
            <li class="attachment-item">
              <div class="attachment-info">
                <div class="attachment-name">{{name}}</div>
                <div class="attachment-size">{{size}}</div>
              </div>
              <div class="attachment-action">
                <a href="{{path}}" target="_blank">View</a>
              </div>
            </li>
          {{/each}}
        </ul>
      </div>
    {{/if}}
  </main>
    <script>
    document.addEventListener('DOMContentLoaded', function() {      console.log('DOM fully loaded');
      
      // Setup expand/collapse functionality for Confluence expand macros
      setupExpandMacros();
      
      // Add syntax highlighting to code blocks
      highlightCodeBlocks();
      
      // Mobile menu toggle
      const menuToggle = document.querySelector('.menu-toggle');
      const sidebar = document.querySelector('.sidebar');
        if (menuToggle && sidebar) {
        menuToggle.addEventListener('click', function() {
          sidebar.classList.toggle('active');
        });
      }

      // Mark active page for highlighting
      const currentPagePath = window.location.pathname;
      const currentPageFilename = currentPagePath.split('/').pop();
      
      if (currentPageFilename) {
        // Find the page link that matches the current page
        const pageLinks = document.querySelectorAll('.page-link');
        pageLinks.forEach(link => {
          const linkUrl = link.getAttribute('href');
          if (linkUrl && linkUrl.endsWith(currentPageFilename)) {
            link.classList.add('active');
            
            // Make sure parents are visible
            let parent = link.closest('.page-children');
            while (parent) {
              parent.style.display = 'block';
              parent = parent.parentElement.closest('.page-children');
            }
          }
        });
      }
    });
    
    // Setup expand/collapse functionality for Confluence expand macros
    function setupExpandMacros() {
      const expandMacros = document.querySelectorAll('.expand-container');
      expandMacros.forEach(macro => {
        const header = macro.querySelector('.expand-header');
        const content = macro.querySelector('.expand-content');
        
        if (header && content) {
          header.addEventListener('click', function() {
            const isExpanded = macro.classList.contains('expanded');
            if (isExpanded) {
              macro.classList.remove('expanded');
              content.style.display = 'none';
            } else {
              macro.classList.add('expanded');
              content.style.display = 'block';
            }          });
        }
      });
    }
    
    // Add syntax highlighting to code blocks
    function highlightCodeBlocks() {
      const codeBlocks = document.querySelectorAll('pre code');
      codeBlocks.forEach(block => {
        const language = block.className.replace('language-', '').trim();
        if (language) {
          applyBasicHighlighting(block, language);
        }
      });
    }
    
    // Simple syntax highlighting function
    function applyBasicHighlighting(codeElement, language) {
      // Basic syntax highlighting patterns for common languages
      const patterns = {
        'javascript': /\b(const|let|var|function|return|if|else|for|while|switch|case|break|class|extends|new|this|import|export|from|as|async|await|try|catch|finally)\b/g,
        'typescript': /\b(const|let|var|function|return|if|else|for|while|switch|case|break|class|extends|interface|type|enum|namespace|implements|readonly|private|protected|public|static|new|this|import|export|from|as|async|await|try|catch|finally)\b/g,
        'python': /\b(def|class|if|elif|else|for|while|try|except|finally|with|import|from|as|return|yield|pass|break|continue|in|is|not|and|or|True|False|None)\b/g,
        'html': /(&lt;[\/]?[a-z][\w-]*(?:\s+[\w-]+=(?:"[^"]*"|'[^']*'))*\s*&gt;)/g,
        'css': /([.#][\w-]+|@media|@keyframes)/g,
        'bash': /\b(if|then|else|elif|fi|for|while|do|done|case|esac|function|return|in)\b/g,
        'generic': /\b(function|return|if|else|for|while|class|new|this)\b/g
      };
      
      // Get the content
      let content = codeElement.textContent;
      
      // Apply language-specific highlighting or generic if not found
      const pattern = patterns[language] || patterns.generic;
      content = content.replace(pattern, '<span style="color: #0052CC;">$1</span>');
      
      // Highlight strings
      content = content.replace(/(["'])(.*?)\1/g, '<span style="color: #00875A;">$1$2$1</span>');
      
      // Highlight comments for specific languages
      if (language === 'javascript' || language === 'typescript') {
        content = content.replace(/(\/\/.*$)/gm, '<span style="color: #626F86;">$1</span>');
        content = content.replace(/(\/\*[\s\S]*?\*\/)/g, '<span style="color: #626F86;">$1</span>');
      } else if (language === 'python') {
        content = content.replace(/(#.*$)/gm, '<span style="color: #626F86;">$1</span>');
      }
      
      // Set the highlighted content
      codeElement.innerHTML = content;
    }
    
    // Helper function to find an object in an array by property
    function find(array, key) {
      return array.find(item => item.key === key);
    }
  </script>
</body>
</html>
