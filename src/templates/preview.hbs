<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>{{title}} - Confluence Preview</title>
  <link rel="stylesheet" href="../confluence-styles.css">
  <style>
    :root {
      --primary-color: #0052CC;
      --primary-light: #4C9AFF;
      --primary-dark: #0747A6;
      --secondary-color: #6554C0;
      --background-color: #F4F5F7;
      --text-color: #172B4D;
      --light-text: #6B778C;
      --border-color: #DFE1E6;
      --success-color: #36B37E;
      --warning-color: #FFAB00;
      --error-color: #FF5630;
      --info-color: #00B8D9;
      --panel-background: #FFFFFF;
      --sidebar-width: 280px;
      --header-height: 60px;
      --spacing-xs: 4px;
      --spacing-sm: 8px;
      --spacing-md: 16px;
      --spacing-lg: 24px;
      --spacing-xl: 32px;
      --border-radius: 3px;
      --font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: var(--font-family);
      background-color: var(--background-color);
      color: var(--text-color);
      line-height: 1.5;
      font-size: 14px;
      display: grid;
      grid-template-areas:
        "header header"
        "sidebar main"
        "footer footer";
      grid-template-columns: var(--sidebar-width) 1fr;
      grid-template-rows: var(--header-height) 1fr auto;
      min-height: 100vh;
    }

    /* Header styles */
    .header {
      grid-area: header;
      background-color: var(--primary-color);
      color: white;
      padding: 0 var(--spacing-lg);
      display: flex;
      align-items: center;
      justify-content: space-between;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .header h1 {
      font-size: 20px;
      font-weight: 500;
    }

    .header-info {
      display: flex;
      align-items: center;
      gap: var(--spacing-md);
    }

    .dry-run-badge {
      background-color: #FF8B00;
      color: white;
      font-size: 12px;
      padding: var(--spacing-xs) var(--spacing-sm);
      border-radius: var(--border-radius);
      font-weight: 500;
    }

    /* Sidebar styles */
    .sidebar {
      grid-area: sidebar;
      background-color: var(--panel-background);
      border-right: 1px solid var(--border-color);
      padding: var(--spacing-md);
      overflow-y: auto;
    }

    .spaces-nav {
      margin-bottom: var(--spacing-lg);
    }

    .spaces-nav h2 {
      font-size: 16px;
      font-weight: 500;
      margin-bottom: var(--spacing-md);
      color: var(--primary-dark);
      border-bottom: 1px solid var(--border-color);
      padding-bottom: var(--spacing-sm);
    }

    .space-item {
      margin-bottom: var(--spacing-md);
    }

    .space-key {
      font-weight: 500;
      color: var(--primary-dark);
      margin-bottom: var(--spacing-sm);
      display: block;
      cursor: pointer;
      padding: var(--spacing-xs) var(--spacing-sm);
      border-radius: var(--border-radius);
    }

    .space-key:hover {
      background-color: var(--background-color);
    }

    .page-tree {
      margin-left: var(--spacing-md);
    }

    .page-item {
      margin-bottom: var(--spacing-xs);
    }    .page-link {
      display: block;
      padding: var(--spacing-xs) var(--spacing-sm);
      color: var(--text-color);
      text-decoration: none;
      border-radius: var(--border-radius);
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      position: relative;
    }

    .page-link.has-children {
      padding-left: var(--spacing-lg);
      cursor: pointer;
    }

    .page-link.has-children::before {
      content: "â–¶";
      position: absolute;
      left: 4px;
      top: 50%;
      transform: translateY(-50%);
      font-size: 10px;
      color: var(--light-text);
      transition: transform 0.2s;
    }

    .page-link.has-children.expanded::before {
      transform: translateY(-50%) rotate(90deg);
    }

    .page-link:hover {
      background-color: var(--background-color);
    }

    .page-link.active {
      background-color: var(--primary-light);
      color: white;
    }    .page-children {
      margin-left: var(--spacing-lg);
      margin-top: var(--spacing-xs);
      border-left: 1px solid var(--border-color);
      padding-left: var(--spacing-sm);
      /* Always display for debugging */
      display: block !important; 
      /* Add a background color to make them more visible */
      background-color: rgba(76, 154, 255, 0.05);
    }

    /* Main content styles */
    .main-content {
      grid-area: main;
      background-color: var(--panel-background);
      padding: var(--spacing-xl);
      overflow-y: auto;
      margin: var(--spacing-md);
      border-radius: var(--border-radius);
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .page-header {
      margin-bottom: var(--spacing-xl);
      border-bottom: 1px solid var(--border-color);
      padding-bottom: var(--spacing-md);
    }

    .page-header h1 {
      font-size: 24px;
      font-weight: 500;
      margin-bottom: var(--spacing-sm);
    }

    .metadata {
      color: var(--light-text);
      font-size: 12px;
      display: flex;
      gap: var(--spacing-md);
    }

    .page-content {
      line-height: 1.6;
    }

    /* Page content styling */
    .page-content h1 {
      font-size: 24px;
      font-weight: 500;
      margin: var(--spacing-lg) 0 var(--spacing-md);
      padding-bottom: var(--spacing-sm);
      border-bottom: 1px solid var(--border-color);
    }

    .page-content h2 {
      font-size: 20px;
      font-weight: 500;
      margin: var(--spacing-lg) 0 var(--spacing-md);
    }

    .page-content h3 {
      font-size: 16px;
      font-weight: 500;
      margin: var(--spacing-md) 0;
    }

    .page-content h4, .page-content h5, .page-content h6 {
      font-size: 14px;
      font-weight: 500;
      margin: var(--spacing-md) 0;
    }

    .page-content p {
      margin-bottom: var(--spacing-md);
    }

    .page-content ul, .page-content ol {
      margin-bottom: var(--spacing-md);
      padding-left: var(--spacing-xl);
    }

    .page-content li {
      margin-bottom: var(--spacing-xs);
    }

    .page-content code {
      font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace;
      background-color: var(--background-color);
      padding: 0 var(--spacing-xs);
      border-radius: var(--border-radius);
    }

    .page-content pre {
      background-color: var(--background-color);
      padding: var(--spacing-md);
      border-radius: var(--border-radius);
      overflow-x: auto;
      margin-bottom: var(--spacing-md);
    }

    .page-content pre code {
      background-color: transparent;
      padding: 0;
    }

    .page-content blockquote {
      border-left: 4px solid var(--primary-light);
      padding-left: var(--spacing-md);
      margin-left: var(--spacing-md);
      margin-bottom: var(--spacing-md);
      color: var(--light-text);
    }

    .page-content table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: var(--spacing-md);
    }

    .page-content th, .page-content td {
      border: 1px solid var(--border-color);
      padding: var(--spacing-sm);
      text-align: left;
    }

    .page-content th {
      background-color: var(--background-color);
      font-weight: 500;
    }

    .page-content a {
      color: var(--primary-color);
      text-decoration: none;
    }

    .page-content a:hover {
      text-decoration: underline;
    }

    /* Attachments section */
    .attachments {
      margin-top: var(--spacing-xl);
      border-top: 1px solid var(--border-color);
      padding-top: var(--spacing-md);
    }

    .attachments h2 {
      font-size: 16px;
      font-weight: 500;
      margin-bottom: var(--spacing-md);
    }

    .attachment-item {
      display: flex;
      align-items: center;
      padding: var(--spacing-sm);
      border: 1px solid var(--border-color);
      border-radius: var(--border-radius);
      margin-bottom: var(--spacing-sm);
    }

    .attachment-icon {
      margin-right: var(--spacing-sm);
      color: var(--light-text);
    }

    .attachment-info {
      flex: 1;
    }

    .attachment-name {
      font-weight: 500;
    }

    .attachment-size {
      font-size: 12px;
      color: var(--light-text);
    }

    .attachment-action {
      margin-left: var(--spacing-sm);
    }

    .attachment-action a {
      color: var(--primary-color);
      text-decoration: none;
    }

    /* Macro styles */
    .macro {
      margin-bottom: var(--spacing-md);
      border: 1px solid var(--border-color);
      border-radius: var(--border-radius);
      overflow: hidden;
    }

    .macro-title {
      background-color: var(--background-color);
      padding: var(--spacing-sm);
      font-weight: 500;
      border-bottom: 1px solid var(--border-color);
    }

    .macro-content {
      padding: var(--spacing-md);
    }

    .code-block {
      margin-bottom: var(--spacing-md);
      border: 1px solid var(--border-color);
      border-radius: var(--border-radius);
      overflow: hidden;
    }

    .code-title {
      background-color: var(--background-color);
      padding: var(--spacing-sm);
      font-weight: 500;
      border-bottom: 1px solid var(--border-color);
    }

    /* Admonition boxes */
    .admonition {
      margin-bottom: var(--spacing-md);
      border-left: 4px solid var(--info-color);
      background-color: rgba(0, 184, 217, 0.1);
      border-radius: 0 var(--border-radius) var(--border-radius) 0;
      overflow: hidden;
    }

    .admonition-title {
      padding: var(--spacing-sm) var(--spacing-md);
      font-weight: 500;
      background-color: rgba(0, 184, 217, 0.2);
    }

    .admonition-content {
      padding: var(--spacing-md);
    }

    .admonition-note {
      border-left-color: var(--info-color);
      background-color: rgba(0, 184, 217, 0.1);
    }

    .admonition-note .admonition-title {
      background-color: rgba(0, 184, 217, 0.2);
    }

    .admonition-warning {
      border-left-color: var(--warning-color);
      background-color: rgba(255, 171, 0, 0.1);
    }

    .admonition-warning .admonition-title {
      background-color: rgba(255, 171, 0, 0.2);
    }

    .admonition-tip {
      border-left-color: var(--success-color);
      background-color: rgba(54, 179, 126, 0.1);
    }

    .admonition-tip .admonition-title {
      background-color: rgba(54, 179, 126, 0.2);
    }

    /* Task list */
    .task-list {
      margin-bottom: var(--spacing-md);
    }

    .task {
      display: flex;
      align-items: flex-start;
      margin-bottom: var(--spacing-sm);
    }

    .task input[type="checkbox"] {
      margin-right: var(--spacing-sm);
      margin-top: 3px;
    }

    /* Layout components */
    .confluence-layout {
      display: flex;
      flex-direction: column;
      gap: var(--spacing-md);
      margin-bottom: var(--spacing-md);
    }

    .layout-section {
      display: flex;
      gap: var(--spacing-md);
    }

    .layout-section-single .layout-cell {
      width: 100%;
    }

    .layout-section-two_equal .layout-cell {
      width: 50%;
    }

    .layout-section-two_left_sidebar .layout-cell:first-child {
      width: 30%;
    }

    .layout-section-two_left_sidebar .layout-cell:last-child {
      width: 70%;
    }

    .layout-section-two_right_sidebar .layout-cell:first-child {
      width: 70%;
    }

    .layout-section-two_right_sidebar .layout-cell:last-child {
      width: 30%;
    }

    .layout-section-three_equal .layout-cell {
      width: 33.33%;
    }

    .layout-section-three_with_sidebars .layout-cell:first-child,
    .layout-section-three_with_sidebars .layout-cell:last-child {
      width: 20%;
    }

    .layout-section-three_with_sidebars .layout-cell:nth-child(2) {
      width: 60%;
    }

    .layout-cell {
      background-color: var(--panel-background);
      padding: var(--spacing-md);
      border-radius: var(--border-radius);
      border: 1px solid var(--border-color);
    }

    /* Error display */
    .error {
      color: var(--error-color);
      background-color: rgba(255, 86, 48, 0.1);
      padding: var(--spacing-md);
      border-radius: var(--border-radius);
      margin-bottom: var(--spacing-md);
    }

    /* Responsive adjustments */
    @media (max-width: 1024px) {
      body {
        grid-template-columns: minmax(var(--sidebar-width), 250px) 1fr;
      }
    }

    @media (max-width: 768px) {
      body {
        grid-template-areas:
          "header header"
          "main main"
          "footer footer";
        grid-template-columns: 1fr;
      }
      
      .sidebar {
        display: none;
      }
      
      .main-content {
        margin: var(--spacing-sm);
        padding: var(--spacing-md);
      }
    }

    /* For mobile sidebar toggle */
    .menu-toggle {
      display: none;
      cursor: pointer;
    }

    @media (max-width: 768px) {
      .menu-toggle {
        display: block;
      }
      
      .sidebar.active {
        display: block;
        position: fixed;
        top: var(--header-height);
        left: 0;
        bottom: 0;
        width: 80%;
        z-index: 100;
        box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
      }
    }
  </style>
</head>
<body>
  <header class="header">
    <div class="header-info">
      <h1>Confluence Preview</h1>
      <span class="dry-run-badge">DRY RUN</span>
    </div>
    <button class="menu-toggle">â˜° Menu</button>
  </header>

  <aside class="sidebar">
    <div class="spaces-nav">
      <h2>Spaces</h2>      {{#each spaces}}
        <div class="space-item">
          <span class="space-key" data-key="{{key}}">{{key}}</span>
          <div class="page-tree">
            <!-- Debug info to verify recursivePageTree is working -->
            <div style="color: #FF5630; font-size: 12px; margin-bottom: 8px;">
              Space: {{key}}, Pages: {{pages.length}}
            </div>
            {{> recursivePageTree pages=pages spaceKey=key}}
          </div>
        </div>
      {{/each}}
    </div>
  </aside>
  <main class="main-content">
    <div class="page-header">
      <h1>{{title}}</h1>
      <div class="metadata">
        <span>Space: {{spaceKey}}</span>
        <span>Version: {{version}}</span>
        <span>ID: {{id}}</span>
      </div>
    </div>

    <div class="page-content confluence-content">
      {{{content}}}
    </div>    {{#if attachments.length}}
      <div class="confluence-attachments">
        <h2 class="attachments-header">Attachments</h2>
        <ul class="attachment-list">
          {{#each attachments}}
            <li class="attachment-item">
              <span class="attachment-icon">ðŸ“Ž</span>
              <a href="{{path}}" target="_blank" class="attachment-name">{{name}}</a>
              <span class="attachment-size">{{size}}</span>
            </li>
          {{/each}}
        </ul>
      </div>
    {{/if}}  </main>
  
  <script>    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOM fully loaded');
      
      // Setup expand/collapse functionality for Confluence expand macros
      setupExpandMacros();
      
      // Setup tabs functionality
      setupTabs();
      
      // Add syntax highlighting to code blocks
      highlightCodeBlocks();
      
      // Mobile menu toggle
      const menuToggle = document.querySelector('.menu-toggle');
      const sidebar = document.querySelector('.sidebar');
      
      if (menuToggle && sidebar) {
        menuToggle.addEventListener('click', function() {
          sidebar.classList.toggle('active');
        });
      }

      // Expand/collapse space navigation
      const spaceKeys = document.querySelectorAll('.space-key');
      console.log('Space keys found:', spaceKeys.length);
      
      spaceKeys.forEach(function(spaceKey) {
        spaceKey.addEventListener('click', function() {
          const pageTree = this.nextElementSibling;
          if (pageTree) {
            pageTree.style.display = pageTree.style.display === 'none' ? 'block' : 'none';
          }
        });
      });
      
      // First, log all page children containers found
      const allChildren = document.querySelectorAll('.page-children');
      console.log('All page children containers found:', allChildren.length);
      
      // Add expand/collapse functionality for child pages
      const pagesWithChildren = document.querySelectorAll('.page-item > .page-link + .page-children');
      console.log('Pages with children found:', pagesWithChildren.length);
      
      pagesWithChildren.forEach(function(childrenContainer) {
        const pageLink = childrenContainer.previousElementSibling;
        console.log('Adding expand/collapse to:', pageLink.textContent.trim());
        
        // Add a visual indicator for pages with children
        pageLink.classList.add('has-children');
        
        // Make the parent link expandable
        pageLink.addEventListener('click', function(event) {
          console.log('Page link clicked:', this.textContent.trim());
          
          // If clicking the page link, don't prevent default if Ctrl is pressed
          // This allows opening the page in a new tab with Ctrl+click
          if (!event.ctrlKey && !event.metaKey) {
            event.preventDefault();
            
            // Toggle display of children
            childrenContainer.style.display = childrenContainer.style.display === 'none' ? 'block' : 'none';
            pageLink.classList.toggle('expanded', childrenContainer.style.display !== 'none');
            console.log('Toggled children visibility for:', this.textContent.trim());
          }
        });
        
        // Auto-expand children for the active page and its ancestors
        if (pageLink.classList.contains('active') || childrenContainer.querySelector('.active')) {
          childrenContainer.style.display = 'block';
          pageLink.classList.add('expanded');
          console.log('Auto-expanded active path:', pageLink.textContent.trim());
        } else {
          // Hide others by default (for cleaner UI)
          childrenContainer.style.display = 'none';
        }
      });
      
      // If we have an active page, make sure all its parents are expanded
      const activePage = document.querySelector('.page-link.active');
      if (activePage) {
        console.log('Found active page:', activePage.textContent.trim());
        
        // Find all parent page-items containing this active page
        let parent = activePage.parentElement;
        while (parent) {
          if (parent.classList.contains('page-children')) {
            // This is a children container, expand it
            parent.style.display = 'block';
            
            // Find the parent link and mark it as expanded
            const parentLink = parent.previousElementSibling;
            if (parentLink && parentLink.classList.contains('page-link')) {
              parentLink.classList.add('expanded');
              console.log('Expanded parent:', parentLink.textContent.trim());
            }
          }
          parent = parent.parentElement;
        }
      }
    });
    
    // Handle page tree collapse/expand
    function setupPageTree() {
      // First, log all page children containers found
      const allChildren = document.querySelectorAll('.page-children');
      console.log('All page children containers found:', allChildren.length);
      
      // Expand/collapse page tree
      const toggles = document.querySelectorAll('.page-toggle');
      console.log('Page toggles found:', toggles.length);
      
      toggles.forEach(function(toggle) {
        toggle.addEventListener('click', function(e) {
          e.stopPropagation(); // Prevent the parent click event
          
          // Find the associated children container
          const pageItem = this.closest('.page-item');
          if (!pageItem) return;
          
          const children = pageItem.querySelector('.page-children');
          if (!children) return;
          
          // Toggle display and icon
          const isVisible = children.style.display !== 'none';
          children.style.display = isVisible ? 'none' : 'block';
          
          // Update the toggle icon
          this.textContent = isVisible ? 'â–¶' : 'â–¼';
        });
      });
    }
      // Setup expand/collapse functionality for Confluence expand macros
    function setupExpandMacros() {
      const expandHeaders = document.querySelectorAll('.expand-header');
      
      expandHeaders.forEach(header => {
        header.addEventListener('click', function() {
          const macro = this.closest('.confluence-expand-macro');
          if (macro) {
            macro.classList.toggle('expanded');
          }
        });
      });
    }
    
    // Setup tabs functionality
    function setupTabs() {
      const tabsGroups = document.querySelectorAll('.confluence-tabs');
      
      tabsGroups.forEach(tabsGroup => {
        const tabMenuItems = tabsGroup.querySelectorAll('.tab-menu-item');
        const tabContents = tabsGroup.querySelectorAll('.tab-content');
        
        // Set the first tab as active by default if none are active
        if (!tabsGroup.querySelector('.tab-menu-item.active')) {
          if (tabMenuItems.length > 0) tabMenuItems[0].classList.add('active');
          if (tabContents.length > 0) tabContents[0].classList.add('active');
        }
        
        // Add click handlers to each tab
        tabMenuItems.forEach((tabMenuItem, index) => {
          tabMenuItem.addEventListener('click', function() {
            // Deactivate all tabs
            tabMenuItems.forEach(item => item.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));
            
            // Activate the clicked tab
            tabMenuItem.classList.add('active');
            if (tabContents[index]) {
              tabContents[index].classList.add('active');
            }
          });
        });
        
        // Apply custom tab color if specified
        const tabColor = tabsGroup.getAttribute('data-tab-color');
        if (tabColor) {
          tabsGroup.style.setProperty('--tab-color', tabColor);
        }
      });
    }
    
    // Add syntax highlighting to code blocks
    function highlightCodeBlocks() {
      // Simple syntax highlighting for code blocks
      const codeBlocks = document.querySelectorAll('.code-block pre code');
      
      codeBlocks.forEach(block => {
        const language = block.parentElement.className.replace('language-', '').trim();
        
        // Apply basic styling based on language
        if (language && language !== 'text') {
          applyBasicHighlighting(block, language);
        }
      });
    }
    
    // Simple syntax highlighting function
    function applyBasicHighlighting(codeElement, language) {
      let html = codeElement.innerHTML;
      
      // Common patterns across languages
      const patterns = {
        // Keywords
        keywords: {
          'javascript': /\b(const|let|var|function|return|if|else|for|while|switch|case|break|class|extends|new|this|import|export|from|as|async|await|try|catch|finally)\b/g,
          'typescript': /\b(const|let|var|function|return|if|else|for|while|switch|case|break|class|extends|interface|type|enum|namespace|implements|readonly|private|protected|public|static|new|this|import|export|from|as|async|await|try|catch|finally)\b/g,
          'python': /\b(def|class|if|elif|else|for|while|try|except|finally|with|import|from|as|return|yield|pass|break|continue|in|is|not|and|or|True|False|None)\b/g,
          'java': /\b(public|private|protected|class|interface|enum|extends|implements|static|final|void|return|if|else|for|while|switch|case|break|new|this|try|catch|finally|throw|throws|import)\b/g,
          'csharp': /\b(public|private|protected|class|interface|enum|struct|using|static|readonly|const|void|return|if|else|for|while|switch|case|break|new|this|try|catch|finally|throw|namespace|sealed|abstract|base|override|virtual)\b/g,
          'html': /\b(html|head|body|div|span|p|a|img|table|tr|td|th|ul|ol|li|form|input|button|script|style|link|meta)\b/g,
          'css': /\b(body|div|span|p|a|img|table|tr|td|th|ul|ol|li|form|input|button|margin|padding|color|background|border|font|text|display|position|width|height|top|left|right|bottom)\b/g,
        },
        // Strings
        strings: {
          'default': /(['"])(?:\\.|[^\\])*?\1/g
        },
        // Comments
        comments: {
          'c-style': /\/\/.*?$|\/\*[\s\S]*?\*\//gm,
          'python': /#.*?$|'''[\s\S]*?'''|"""[\s\S]*?"""/gm,
          'html': /<!--[\s\S]*?-->/g
        },
        // Numbers
        numbers: /\b\d+\.?\d*\b/g
      };
      
      // Map language to appropriate patterns
      const languagePatterns = {
        'javascript': {
          keywords: patterns.keywords.javascript,
          strings: patterns.strings.default,
          comments: patterns.comments['c-style'],
          numbers: patterns.numbers
        },
        'typescript': {
          keywords: patterns.keywords.typescript,
          strings: patterns.strings.default,
          comments: patterns.comments['c-style'],
          numbers: patterns.numbers
        },
        'python': {
          keywords: patterns.keywords.python,
          strings: patterns.strings.default,
          comments: patterns.comments.python,
          numbers: patterns.numbers
        },
        'java': {
          keywords: patterns.keywords.java,
          strings: patterns.strings.default,
          comments: patterns.comments['c-style'],
          numbers: patterns.numbers
        },
        'csharp': {
          keywords: patterns.keywords.csharp,
          strings: patterns.strings.default,
          comments: patterns.comments['c-style'],
          numbers: patterns.numbers
        },
        'html': {
          keywords: patterns.keywords.html,
          strings: patterns.strings.default,
          comments: patterns.comments.html
        },
        'css': {
          keywords: patterns.keywords.css,
          strings: patterns.strings.default,
          comments: patterns.comments['c-style']
        }
      };
      
      // Get patterns for this language or use default set
      const langPatterns = languagePatterns[language] || {
        strings: patterns.strings.default,
        numbers: patterns.numbers
      };
      
      // Apply highlighting
      // First escape HTML to prevent XSS
      html = html.replace(/&/g, '&amp;')
                 .replace(/</g, '&lt;')
                 .replace(/>/g, '&gt;');
      
      // Then apply syntax highlighting, order matters to avoid highlighting within comments/strings
      if (langPatterns.comments) {
        html = html.replace(langPatterns.comments, '<span style="color: #6A9955;">$&</span>');
      }
      
      if (langPatterns.strings) {
        html = html.replace(langPatterns.strings, '<span style="color: #CE9178;">$&</span>');
      }
      
      if (langPatterns.keywords) {
        html = html.replace(langPatterns.keywords, '<span style="color: #569CD6;">$&</span>');
      }
      
      if (langPatterns.numbers) {
        html = html.replace(langPatterns.numbers, '<span style="color: #B5CEA8;">$&</span>');
      }
      
      codeElement.innerHTML = html;
    }
    
    // Initialize page tree
    setupPageTree();
  </script>
</body>
</html>
